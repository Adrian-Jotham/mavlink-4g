name: Build and Test

on: [push, pull_request]

jobs:
  build:
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        include:
          - name: armhf
            arch: arm-linux-gnueabihf
          - name: aarch64
            arch: aarch64-linux-gnu
          - name: native
            arch: native
          - name: m32
            arch: native
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: install dependencies (native)
        if: ${{ matrix.arch == 'native' }}
        run: |
          if [ "${{ matrix.name }}" == "m32" ]; then
              sudo dpkg --add-architecture i386
              sudo apt-get update
              sudo apt-get install --yes pkg-config gcc-multilib g++-multilib libgtest-dev:i386
          fi
          sudo apt-get install --yes ninja-build python3-pip libgtest-dev
          pip3 install meson pymavlink
      - name: install dependencies (cross)
        if: ${{ matrix.arch != 'native' }}
        run: |
          sudo apt-get install --yes ninja-build gcc-${{ matrix.arch }} g++-${{ matrix.arch }} podman python3-pip
          pip3 install meson pymavlink

      - name: prepare sysroot
        if: ${{ matrix.arch != 'native' }}
        run: |
          mkdir rootfs
          tools/ci-create-rootfs.sh ${{ matrix.name }} > rootfs.tar
          tar -xf rootfs.tar --directory=rootfs
          sed -e "s#@sysroot@#$PWD/rootfs#g" meson-cross-sysroot.ini.in > meson-cross-sysroot.ini

      - name: configure (native)
        if: ${{ matrix.arch == 'native' }}
        run: |
          if [ "${{ matrix.name }}" == "m32" ]; then
              export PKG_CONFIG_PATH=/usr/lib/i386-linux-gnu/pkgconfig
              export CXXFLAGS=-m32
              export CFLAGS=-m32
              meson setup --libdir i386-linux-gnu -Dsystemdsystemunitdir=/usr/lib/systemd/system build-${{ matrix.name }} .
          else
              meson setup build-${{ matrix.name }} .
          fi
      - name: configure (cross)
        if: ${{ matrix.arch != 'native' }}
        run: meson setup -Dsystemdsystemunitdir=/usr/lib/systemd/system --cross-file meson-cross-${{ matrix.name }}.ini --cross-file meson-cross-sysroot.ini build-${{ matrix.name }} .

      - name: build
        run: ninja -C build-${{ matrix.name }}

      - name: test
        if: ${{ matrix.arch == 'native' }}
        run: ninja -C build-${{ matrix.name }} test

      - name: install
        run: DESTDIR=./.debpkg ninja -C build-${{ matrix.name }} install

      - name: run routing_test.py
        if: ${{ matrix.arch == 'native' }}
        run: ./tests/routing_test.py -b ./build-${{ matrix.name }}/src/mavlink-routerd

  alpine-linux:
    name: alpine 3.14 (musl)
    runs-on: ubuntu-20.04
    container: alpine:3.14
    steps:
      - name: install dependencies
        run: apk update && apk add build-base git linux-headers pkgconf meson ninja

      - uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: configure
        run: meson setup -Dsystemdsystemunitdir=/usr/lib/systemd/system build .

      - name: build
        run: ninja -C build

      - name: Rename
        run: cp build/src/mavlink-routerd build/src/mavlink-routerd-musl-x86-64

      - uses: actions/upload-artifact@master
        with:
          path: build/src/mavlink-routerd-musl-x86-64
      - uses: svenstaro/upload-release-action@v2
        name: Upload binaries to release
        if: ${{ startsWith(github.ref, 'refs/tags/') }}
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: build/src/mavlink-routerd-musl-x86-64
          tag: ${{ github.ref }}
          prerelease: ${{ !startsWith(github.ref, 'refs/tags/v') }}
          overwrite: true
